
import { Pool, neonConfig } from '@neondatabase/serverless';
import fs from 'fs';
import path from 'path';
import ws from 'ws';

// Configure WebSocket for Neon
neonConfig.webSocketConstructor = ws;

if (!process.env.DATABASE_URL) {
  console.error('DATABASE_URL environment variable is not set');
  process.exit(1);
}

const pool = new Pool({ 
  connectionString: process.env.DATABASE_URL,
  ssl: true
});

// Helper function to escape SQL values
function escapeSQLValue(value) {
  if (value === null || value === undefined) {
    return 'NULL';
  }
  
  if (typeof value === 'string') {
    return `'${value.replace(/'/g, "''")}'`;
  }
  
  if (typeof value === 'boolean') {
    return value ? 'TRUE' : 'FALSE';
  }
  
  if (value instanceof Date) {
    return `'${value.toISOString()}'`;
  }
  
  if (typeof value === 'object') {
    return `'${JSON.stringify(value).replace(/'/g, "''")}'`;
  }
  
  return value;
}

// Generate CREATE TABLE statement from table structure
async function getTableSchema(tableName) {
  try {
    const result = await pool.query(`
      SELECT 
        column_name,
        data_type,
        is_nullable,
        column_default,
        character_maximum_length
      FROM information_schema.columns 
      WHERE table_name = $1 
      ORDER BY ordinal_position
    `, [tableName]);
    
    if (result.rows.length === 0) {
      return null;
    }
    
    const columns = result.rows.map(col => {
      let columnDef = `${col.column_name} ${col.data_type.toUpperCase()}`;
      
      if (col.character_maximum_length) {
        columnDef += `(${col.character_maximum_length})`;
      }
      
      if (col.is_nullable === 'NO') {
        columnDef += ' NOT NULL';
      }
      
      if (col.column_default) {
        columnDef += ` DEFAULT ${col.column_default}`;
      }
      
      return `  ${columnDef}`;
    });
    
    return `CREATE TABLE IF NOT EXISTS ${tableName} (\n${columns.join(',\n')}\n);`;
  } catch (error) {
    console.error(`Error getting schema for table ${tableName}:`, error.message);
    return `-- Error getting schema for table ${tableName}: ${error.message}`;
  }
}

async function exportTableToSQL(tableName) {
  try {
    console.log(`Exporting table: ${tableName}`);
    
    // Get table schema
    const schema = await getTableSchema(tableName);
    
    // Get table data
    const result = await pool.query(`SELECT * FROM ${tableName}`);
    
    let sqlOutput = `\n-- Table: ${tableName}\n`;
    sqlOutput += `-- Rows: ${result.rows.length}\n`;
    sqlOutput += `${schema}\n\n`;
    
    if (result.rows.length > 0) {
      // Get column names
      const columns = Object.keys(result.rows[0]);
      const columnNames = columns.join(', ');
      
      // Generate INSERT statements
      sqlOutput += `-- Data for table: ${tableName}\n`;
      
      for (const row of result.rows) {
        const values = columns.map(col => escapeSQLValue(row[col])).join(', ');
        sqlOutput += `INSERT INTO ${tableName} (${columnNames}) VALUES (${values});\n`;
      }
    } else {
      sqlOutput += `-- No data found in table: ${tableName}\n`;
    }
    
    return {
      tableName,
      rowCount: result.rows.length,
      sql: sqlOutput,
      success: true
    };
  } catch (error) {
    console.error(`Error exporting table ${tableName}:`, error.message);
    return {
      tableName,
      rowCount: 0,
      sql: `-- Error exporting table ${tableName}: ${error.message}\n`,
      success: false,
      error: error.message
    };
  }
}

async function exportDatabaseToSQL() {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  
  console.log('Starting SQL database export...');
  
  // List of tables to export
  const tables = [
    'users',
    'shopify_connections', 
    'shopify_stores',
    'user_stores',
    'blog_posts',
    'sync_activities',
    'content_gen_requests',
    'authors',
    'projects',
    'genders',
    'styles', 
    'tones'
  ];

  let fullSQL = `-- TopShop SEO App Database Export\n`;
  fullSQL += `-- Export Date: ${new Date().toISOString()}\n`;
  fullSQL += `-- Database: PostgreSQL\n`;
  fullSQL += `-- Generated by: export-database-sql.js\n\n`;
  
  fullSQL += `-- Disable foreign key checks during import\n`;
  fullSQL += `SET session_replication_role = replica;\n\n`;

  let totalRows = 0;
  let successfulTables = 0;
  let errorTables = 0;

  // Export each table
  for (const tableName of tables) {
    const tableData = await exportTableToSQL(tableName);
    fullSQL += tableData.sql;
    
    if (tableData.success) {
      successfulTables++;
      totalRows += tableData.rowCount;
      console.log(`‚úÖ ${tableName}: ${tableData.rowCount} rows exported`);
    } else {
      errorTables++;
      console.log(`‚ö†Ô∏è  ${tableName}: Error - ${tableData.error}`);
    }
  }
  
  fullSQL += `\n-- Re-enable foreign key checks\n`;
  fullSQL += `SET session_replication_role = DEFAULT;\n\n`;
  fullSQL += `-- Export completed at: ${new Date().toISOString()}\n`;

  // Create export filename
  const filename = `database-export-${timestamp}.sql`;
  const filePath = path.join(process.cwd(), filename);
  
  try {
    // Ensure directory exists
    const dir = path.dirname(filePath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    
    // Write SQL file with explicit encoding
    fs.writeFileSync(filePath, fullSQL, 'utf8');
    
    // Verify file was written
    if (!fs.existsSync(filePath)) {
      throw new Error('File was not created');
    }
    
    const fileStats = fs.statSync(filePath);
    if (fileStats.size === 0) {
      throw new Error('File was created but is empty');
    }
    
    console.log(`\nüìÅ Database exported to: ${filename}`);
    console.log(`üìä Export Summary:`);
    console.log(`   - Tables exported successfully: ${successfulTables}`);
    console.log(`   - Tables with errors: ${errorTables}`);
    console.log(`   - Total rows exported: ${totalRows}`);
    console.log(`   - File size: ${(fileStats.size / 1024).toFixed(2)} KB`);
    
    return filename;
  } catch (error) {
    console.error('Failed to write SQL export file:', error);
    console.error('Full SQL content length:', fullSQL.length);
    console.error('Target file path:', filePath);
    throw error;
  }
}

async function main() {
  try {
    const filename = await exportDatabaseToSQL();
    console.log('\nüéâ SQL export completed successfully!');
    console.log(`\nüí° Usage:`);
    console.log(`   To import this data into another PostgreSQL database:`);
    console.log(`   psql -d your_database -f ${filename}`);
  } catch (error) {
    console.error('‚ùå SQL export failed:', error);
  } finally {
    await pool.end();
  }
}

// Handle process termination
process.on('SIGINT', async () => {
  console.log('\n‚èπÔ∏è  Export interrupted by user');
  await pool.end();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\n‚èπÔ∏è  Export terminated');
  await pool.end();
  process.exit(0);
});

main();
